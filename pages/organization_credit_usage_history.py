# Generated by Snowflake Copilot
# Import python packages
import streamlit as st
import plotly
from snowflake.snowpark.context import get_active_session
# Import required packages
import plotly.graph_objects as go
import pandas as pd

# import app pages
# from sql.org_billable_credits import org_billable_usage

from plotly.subplots import make_subplots
session = get_active_session()

def org_credit_usage():
    acct_name_sql = """
    SELECT DISTINCT account_name
    FROM HUB_DB.HUB_CONS_SC.METERING_DAILY_HISTORY_ALL
    WHERE usage_date > CURRENT_DATE - 90
    ORDER BY 1;
    """

    # Execute the query and convert to pandas
    acct_df = session.sql(acct_name_sql).to_pandas()
    
    # Create dropdown with the dates
    selected_acct = str(st.selectbox(
        "Select Account",
        options=acct_df['ACCOUNT_NAME'].tolist()
    ))
    
    wh_credits_l30_sql = """
    WITH usage_detail_rows AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-29,local_cts)) AND local_cts THEN credits_used_compute +
    credits_used_cloud_services ELSE 0 END AS credits_used_last_period,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-29,local_cts)) AND local_cts THEN 0 ELSE credits_used_compute +
    credits_used_cloud_services END AS credits_used_prior_period
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time BETWEEN date_trunc('day', dateadd('day',-59,local_cts)) AND local_cts AND account_name = '""" + selected_acct + """'
    )
    SELECT
    ROUND(SUM(credits_used_last_period),0) AS credits_used_last_period,
    ROUND(SUM(credits_used_prior_period),0) AS credits_used_prior_period,
    100*(SUM(credits_used_last_period) - nullif(SUM(credits_used_prior_period),0)) / (SUM(credits_used_prior_period) ) AS pct_change
    FROM usage_detail_rows
    ;"""

    compute_credits_l30_sql = """
    WITH usage_detail_rows AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-29,local_cts)) AND local_cts THEN credits_used_compute ELSE 0 END
    AS credits_used_last_period,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-29,local_cts)) AND local_cts THEN 0 ELSE credits_used_compute END
    AS credits_used_prior_period
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time BETWEEN date_trunc('day', dateadd('day',-59,local_cts)) AND local_cts AND account_name = '""" + selected_acct + """'
    )
    SELECT
    ROUND(SUM(credits_used_last_period),0) AS credits_used_last_period,
    ROUND(SUM(credits_used_prior_period),0) AS credits_used_prior_period,
    100*(SUM(credits_used_last_period) - nullif(SUM(credits_used_prior_period),0)) / (SUM(credits_used_prior_period) ) AS pct_change
    FROM usage_detail_rows
    ;
    """

    cs_credits_l30_sql="""
    WITH usage_detail_rows AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-29,local_cts)) AND local_cts THEN credits_used_cloud_services ELSE 0
    END AS credits_used_last_period,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-29,local_cts)) AND local_cts THEN 0 ELSE credits_used_cloud_services
    END AS credits_used_prior_period
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time BETWEEN date_trunc('day', dateadd('day',-59,local_cts)) AND local_cts AND account_name = '""" + selected_acct + """'
    )
    SELECT
    ROUND(SUM(credits_used_last_period),0) AS credits_used_last_period,
    ROUND(SUM(credits_used_prior_period),0) AS credits_used_prior_period,
    100*(SUM(credits_used_last_period) - nullif(SUM(credits_used_prior_period),0)) / (SUM(credits_used_prior_period) ) AS pct_change
    FROM usage_detail_rows
    ;
    """

    wh_credits_l7_sql = """
    WITH usage_detail_rows AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-6,local_cts)) AND local_cts THEN credits_used_compute +
    credits_used_cloud_services ELSE 0 END AS credits_used_last_period,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-6,local_cts)) AND local_cts THEN 0 ELSE credits_used_compute +
    credits_used_cloud_services END AS credits_used_prior_period
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time BETWEEN date_trunc('day', dateadd('day',-13,local_cts)) AND local_cts AND account_name = '""" + selected_acct + """'
    )
    SELECT
    ROUND(SUM(credits_used_last_period),0) AS credits_used_last_period,
    ROUND(SUM(credits_used_prior_period),0) AS credits_used_prior_period,
    100*(SUM(credits_used_last_period) - nullif(SUM(credits_used_prior_period),0)) / (SUM(credits_used_prior_period) ) AS pct_change
    FROM usage_detail_rows;
    """

    compute_credits_l7_sql = """
    WITH usage_detail_rows AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-6,local_cts)) AND current_timestamp() THEN credits_used_compute
    ELSE 0 END AS credits_used_last_period,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-6,local_cts)) AND current_timestamp() THEN 0 ELSE
    credits_used_compute END AS credits_used_prior_period
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time BETWEEN date_trunc('day', dateadd('day',-13,local_cts)) AND local_cts AND account_name = '""" + selected_acct + """'
    )
    SELECT
    ROUND(SUM(credits_used_last_period),0) AS credits_used_last_period,
    ROUND(SUM(credits_used_prior_period),0) AS credits_used_prior_period,
    100*(SUM(credits_used_last_period) - nullif(SUM(credits_used_prior_period),0)) / (SUM(credits_used_prior_period) ) AS pct_change
    FROM usage_detail_rows
    ;
    """

    cs_credits_l7_sql = """
    WITH usage_detail_rows AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-6,local_cts)) AND local_cts THEN credits_used_cloud_services ELSE 0
    END AS credits_used_last_period,
    CASE WHEN local_start_time BETWEEN date_trunc('day', dateadd('day',-6,local_cts)) AND local_cts THEN 0 ELSE credits_used_cloud_services
    END AS credits_used_prior_period
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time BETWEEN date_trunc('day', dateadd('day',-13,local_cts)) AND local_cts AND account_name = '""" + selected_acct + """'
    )
    SELECT
    ROUND(SUM(credits_used_last_period),0) AS credits_used_last_period,
    ROUND(SUM(credits_used_prior_period),0) AS credits_used_prior_period,
    100*(SUM(credits_used_last_period) - nullif(SUM(credits_used_prior_period),0)) / (SUM(credits_used_prior_period) ) AS pct_change
    FROM usage_detail_rows
    ;
    """

    wh_credits_l1_sql = """
    WITH usage_detail_rows AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    CASE WHEN local_start_time >= date_trunc('day', dateadd('day',-1,local_cts)) AND local_start_time < date_trunc('day',
    dateadd('day',0,local_cts))THEN credits_used_compute + credits_used_cloud_services ELSE 0 END AS credits_used_last_period,
    CASE WHEN local_start_time >= date_trunc('day', dateadd('day',-1,local_cts)) AND local_start_time < date_trunc('day',
    dateadd('day',0,local_cts)) THEN 0 ELSE credits_used_compute + credits_used_cloud_services END AS credits_used_prior_period
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time >= date_trunc('day', dateadd('day',-2,local_cts)) AND local_start_time < date_trunc('day', dateadd('day',0,local_cts))
    AND account_name = '""" + selected_acct + """'
    )
    SELECT
    ROUND(SUM(credits_used_last_period),0) AS credits_used_last_period,
    ROUND(SUM(credits_used_prior_period),0) AS credits_used_prior_period,
    100*(SUM(credits_used_last_period) - nullif(SUM(credits_used_prior_period),0)) / (SUM(credits_used_prior_period) ) AS pct_change
    FROM usage_detail_rows
    ;
    """

    compute_credits_l1_sql = """
    WITH usage_detail_rows AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    CASE WHEN local_start_time >= date_trunc('day', dateadd('day',-1,local_cts)) AND local_start_time < date_trunc('day',
    dateadd('day',0,local_cts))THEN credits_used_compute ELSE 0 END AS credits_used_last_period,
    CASE WHEN local_start_time >= date_trunc('day', dateadd('day',-1,local_cts)) AND local_start_time < date_trunc('day',
    dateadd('day',0,local_cts)) THEN 0 ELSE credits_used_compute END AS credits_used_prior_period
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time >= date_trunc('day', dateadd('day',-2,local_cts)) AND local_start_time < date_trunc('day', dateadd('day',0,local_cts))
    AND account_name = '""" + selected_acct + """'
    )
    SELECT
    ROUND(SUM(credits_used_last_period),0) AS credits_used_last_period,
    ROUND(SUM(credits_used_prior_period),0) AS credits_used_prior_period,
    100*(SUM(credits_used_last_period) - nullif(SUM(credits_used_prior_period),0)) / (SUM(credits_used_prior_period) ) AS pct_change
    FROM usage_detail_rows
    ;"""

    cs_credits_l1_sql = """
    WITH usage_detail_rows AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    CASE WHEN local_start_time >= date_trunc('day', dateadd('day',-1,local_cts)) AND local_start_time < date_trunc('day',
    dateadd('day',0,local_cts))THEN credits_used_cloud_services ELSE 0 END AS credits_used_last_period,
    CASE WHEN local_start_time >= date_trunc('day', dateadd('day',-1,local_cts)) AND local_start_time < date_trunc('day',
    dateadd('day',0,local_cts)) THEN 0 ELSE credits_used_cloud_services END AS credits_used_prior_period
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time >= date_trunc('day', dateadd('day',-2,local_cts)) AND local_start_time < date_trunc('day', dateadd('day',0,local_cts))
    AND account_name = '""" + selected_acct + """'
    )
    SELECT
    ROUND(SUM(credits_used_last_period),0) AS credits_used_last_period,
    ROUND(SUM(credits_used_prior_period),0) AS credits_used_prior_period,
    100*(SUM(credits_used_last_period) - nullif(SUM(credits_used_prior_period),0)) / (SUM(credits_used_prior_period) ) AS pct_change
    FROM usage_detail_rows
    ;"""

    wh_credits_by_mo_sql = """
    WITH query_details AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    DATE_TRUNC('month', local_start_time)::DATE usage_month
    ,credits_used_compute
    ,credits_used_cloud_services
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time BETWEEN date_trunc('month', dateadd('month',-6,local_cts)) AND local_cts AND account_name = '""" + selected_acct + """'
    )
    SELECT usage_month
    ,ROUND(SUM(credits_used_compute),0) AS "Compute Credits"
    ,ROUND(SUM(credits_used_cloud_services),0) "Credits Used Cloud Svcs"
    ,CASE WHEN "Credits Used Cloud Svcs" - (SUM(credits_used_compute) / 10) > 0
    THEN "Credits Used Cloud Svcs" - ROUND((SUM(credits_used_compute) / 10)) ELSE 0 END AS "Cloud Services Credits Adj"
    FROM query_details
    GROUP BY 1
    ORDER BY 1;"""

    wh_credits_by_wk_sql = """
    WITH query_details AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    DATE_TRUNC('week', local_start_time)::DATE usage_week
    ,credits_used_compute
    ,credits_used_cloud_services
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time BETWEEN date_trunc('week', dateadd('week',-27,local_cts)) AND local_cts AND account_name = '""" + selected_acct + """'
    )
    SELECT usage_week
    ,ROUND(SUM(credits_used_compute),0) AS "Compute Credits"
    ,ROUND(SUM(credits_used_cloud_services),0) "Credits Used Cloud Svcs"
    ,CASE WHEN "Credits Used Cloud Svcs" - (SUM(credits_used_compute) / 10) > 0
    THEN "Credits Used Cloud Svcs" - ROUND((SUM(credits_used_compute) / 10)) ELSE 0 END AS "Cloud Services Credits Adj"
    FROM query_details
    GROUP BY 1
    ORDER BY 1;"""

    wh_credits_by_dy_sql = """
    WITH query_details AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    convert_timezone('America/Los_Angeles',date_trunc('day', dateadd('day',-30,current_timestamp))) AS local_begin_date,
    DATE_TRUNC('day', local_start_time)::DATE usage_day
    ,credits_used_compute
    ,credits_used_cloud_services
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time BETWEEN local_begin_date AND local_cts AND account_name = '""" + selected_acct + """'
    )
    SELECT usage_day
    ,ROUND(SUM(credits_used_compute),0) AS "Compute Credits"
    ,ROUND(SUM(credits_used_cloud_services),0) "Credits Used Cloud Svcs"
    ,CASE WHEN "Credits Used Cloud Svcs" - (SUM(credits_used_compute) / 10) > 0
    THEN "Credits Used Cloud Svcs" - ROUND((SUM(credits_used_compute) / 10)) ELSE 0 END AS "Cloud Services Credits Adj"
    FROM query_details
    GROUP BY 1
    ORDER BY 1;"""

    t10_wh_credit_by_mo_sql = """
    WITH wh_list AS
    -- Configure to how many months back you'd like the top WH USage to be based on
    (SELECT warehouse_name, ROUND(SUM(credits_used),0) credits_used FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE
    start_time BETWEEN date_trunc('month', dateadd('month',-6,current_timestamp())) AND current_timestamp() AND account_name = '""" + selected_acct + """'
    GROUP BY warehouse_name
    ORDER BY 2 DESC limit 10
    )
    , wh_usage_details AS
    (
    SELECT
    convert_timezone('America/Los_Angeles',current_timestamp()) AS local_cts,
    convert_timezone('America/Los_Angeles',start_time) AS local_start_time,
    warehouse_name,
    DATE_TRUNC('month', local_start_time)::DATE usage_month
    ,credits_used, credits_used_compute,credits_used_cloud_services
    FROM HUB_DB.HUB_CONS_SC.WAREHOUSE_METERING_HISTORY_ALL
    WHERE local_start_time BETWEEN date_trunc('month', dateadd('month',-6,local_cts)) AND local_cts AND account_name = '""" + selected_acct + """'
    AND warehouse_name in
    (SELECT warehouse_name FROM wh_list
    )
    )
    SELECT usage_month, warehouse_name
    ,ROUND(SUM(credits_used),0) "WH Credits"
    ,ROUND(SUM(credits_used_compute),0) AS "Compute Credits"
    ,ROUND(SUM(credits_used_cloud_services),0) "Cloud Svcs Credits"
    FROM wh_usage_details
    GROUP BY 1,2
    ORDER BY 1;"""
        
    

    # Execute the query with the selected account parameter
    credits_df = session.sql(wh_credits_l30_sql).to_pandas()
    
    # Create the indicator chart
    credits_fig = go.Figure()
    
    credits_fig.add_trace(go.Indicator(
        mode = "number+delta",
        value = credits_df['CREDITS_USED_LAST_PERIOD'].iloc[0],
        delta = {'reference': credits_df['CREDITS_USED_PRIOR_PERIOD'].iloc[0],
                 'relative': True,
                 'valueformat': '.1%'},
        title = {'text': "Credit Usage Comparison"},
        domain = {'row': 0, 'column': 0}
    ))
    
    # Update layout
    credits_fig.update_layout(
        height=300,
        title_text="Credit Usage Last 30 Days vs Prior 30 Days",
        title_x=0.5,
        title_y=0.95
    )
    
    # Display the chart
    st.plotly_chart(credits_fig, use_container_width=True)

    # Execute the query with the selected account parameter
    compute_credits_df = session.sql(compute_credits_l30_sql).to_pandas()
    
    # Create the indicator chart
    compute_creditsfig = go.Figure()
    
    compute_creditsfig.add_trace(go.Indicator(
        mode = "number+delta",
        value = compute_credits_df['CREDITS_USED_LAST_PERIOD'].iloc[0],
        delta = {'reference': compute_credits_df['CREDITS_USED_PRIOR_PERIOD'].iloc[0],
                 'relative': True,
                 'valueformat': '.1%'},
        title = {'text': "Compute Credits Usage Comparison"},
        domain = {'row': 0, 'column': 0}
    ))
    
    # Update layout
    compute_creditsfig.update_layout(
        height=300,
        title_text="Compute Credits Usage Last 30 Days vs Prior 30 Days",
        title_x=0.5,
        title_y=0.95
    )
    
    # Display the chart
    st.plotly_chart(compute_creditsfig, use_container_width=True)

    # Generated by Snowflake Copilot
    # Execute the query with the selected account parameter
    cs_credits_df = session.sql(cs_credits_l30_sql).to_pandas()

    # Create the indicator chart
    cs_fig = go.Figure()
    
    cs_fig.add_trace(go.Indicator(
        mode = "number+delta",
        value = cs_credits_df['CREDITS_USED_LAST_PERIOD'].iloc[0],
        delta = {'reference': cs_credits_df['CREDITS_USED_PRIOR_PERIOD'].iloc[0],
                 'relative': True,
                 'valueformat': '.1%'},
        title = {'text': "Cloud Services Credits Usage Comparison"},
        domain = {'row': 0, 'column': 0}
    ))
    
    # Update layout
    cs_fig.update_layout(
        height=300,
        title_text="Cloud Services Credits Usage Last 30 Days vs Prior 30 Days",
        title_x=0.5,
        title_y=0.95
    )
    
    # Display the chart
    st.plotly_chart(cs_fig, use_container_width=True)

        # Generated by Snowflake Copilot
    # Execute the query with the selected account parameter
    credits_7d_df = session.sql(wh_credits_l7_sql).to_pandas()
    
    # Create the indicator chart
    credits_7d_fig = go.Figure()
    
    credits_7d_fig.add_trace(go.Indicator(
        mode = "number+delta",
        value = credits_7d_df['CREDITS_USED_LAST_PERIOD'].iloc[0],
        delta = {'reference': credits_7d_df['CREDITS_USED_PRIOR_PERIOD'].iloc[0],
                 'relative': True,
                 'valueformat': '.1%'},
        title = {'text': "Credit Usage Comparison"},
        domain = {'row': 0, 'column': 0}
    ))
    
    # Update layout
    credits_7d_fig.update_layout(
        height=300,
        title_text="Credit Usage Last 7 Days vs Prior 7 Days",
        title_x=0.5,
        title_y=0.95
    )
    
    # Display the chart
    st.plotly_chart(credits_7d_fig, use_container_width=True)

    # Generated by Snowflake Copilot
    # Execute the query with the selected account parameter
    compute_credits_7d_df = session.sql(compute_credits_l7_sql).to_pandas()
    
    # Create the indicator chart
    compute_7d_fig = go.Figure()
    
    compute_7d_fig.add_trace(go.Indicator(
        mode = "number+delta",
        value = compute_credits_7d_df['CREDITS_USED_LAST_PERIOD'].iloc[0],
        delta = {'reference': compute_credits_7d_df['CREDITS_USED_PRIOR_PERIOD'].iloc[0],
                 'relative': True,
                 'valueformat': '.1%'},
        title = {'text': "Compute Credits Usage Comparison"},
        domain = {'row': 0, 'column': 0}
    ))
    
    # Update layout
    compute_7d_fig.update_layout(
        height=300,
        title_text="Compute Credits Usage Last 7 Days vs Prior 7 Days",
        title_x=0.5,
        title_y=0.95
    )
    
    # Display the chart
    st.plotly_chart(compute_7d_fig, use_container_width=True)

    # Generated by Snowflake Copilot
    # Execute the query with the selected account parameter
    cs_credits_7d_df = session.sql(cs_credits_l7_sql).to_pandas()
    
    # Create the indicator chart
    cs_7d_fig = go.Figure()
    
    cs_7d_fig.add_trace(go.Indicator(
        mode = "number+delta",
        value = cs_credits_7d_df['CREDITS_USED_LAST_PERIOD'].iloc[0],
        delta = {'reference': cs_credits_7d_df['CREDITS_USED_PRIOR_PERIOD'].iloc[0],
                 'relative': True,
                 'valueformat': '.1%'},
        title = {'text': "Cloud Services Credits Usage Comparison"},
        domain = {'row': 0, 'column': 0}
    ))
    
    # Update layout
    cs_7d_fig.update_layout(
        height=300,
        title_text="Cloud Services Credits Usage Last 7 Days vs Prior 7 Days",
        title_x=0.5,
        title_y=0.95
    )
    
    # Display the chart
    st.plotly_chart(cs_7d_fig, use_container_width=True)

    # Generated by Snowflake Copilot
    # Execute the query with the selected account parameter
    credits_1d_df = session.sql(wh_credits_l1_sql).to_pandas()
    
    # Create the indicator chart
    credits_1d_fig = go.Figure()
    
    credits_1d_fig.add_trace(go.Indicator(
        mode = "number+delta",
        value = credits_1d_df['CREDITS_USED_LAST_PERIOD'].iloc[0],
        delta = {'reference': credits_1d_df['CREDITS_USED_PRIOR_PERIOD'].iloc[0],
                 'relative': True,
                 'valueformat': '.1%'},
        title = {'text': "Credit Usage Comparison"},
        domain = {'row': 0, 'column': 0}
    ))
    
    # Update layout
    credits_1d_fig.update_layout(
        height=300,
        title_text="Credit Usage Yesterday vs Day Before",
        title_x=0.5,
        title_y=0.95
    )
    
    # Display the chart
    st.plotly_chart(credits_1d_fig, use_container_width=True)

    # Generated by Snowflake Copilot
    # Execute the query with the selected account parameter
    compute_credits_1d_df = session.sql(compute_credits_l1_sql).to_pandas()
    
    # Create the indicator chart
    compute_1d_fig = go.Figure()
    
    compute_1d_fig.add_trace(go.Indicator(
        mode = "number+delta",
        value = compute_credits_1d_df['CREDITS_USED_LAST_PERIOD'].iloc[0],
        delta = {'reference': compute_credits_1d_df['CREDITS_USED_PRIOR_PERIOD'].iloc[0],
                 'relative': True,
                 'valueformat': '.1%'},
        title = {'text': "Compute Credits Usage Comparison"},
        domain = {'row': 0, 'column': 0}
    ))
    
    # Update layout
    compute_1d_fig.update_layout(
        height=300,
        title_text="Compute Credits Usage Yesterday vs Day Before",
        title_x=0.5,
        title_y=0.95
    )
    
    # Display the chart
    st.plotly_chart(compute_1d_fig, use_container_width=True)

    # Generated by Snowflake Copilot
    # Execute the query with the selected account parameter
    cs_credits_1d_df = session.sql(cs_credits_l1_sql).to_pandas()

    # Create the indicator chart
    cs_1d_fig = go.Figure()
    
    cs_1d_fig.add_trace(go.Indicator(
        mode = "number+delta",
        value = cs_credits_1d_df['CREDITS_USED_LAST_PERIOD'].iloc[0],
        delta = {'reference': cs_credits_1d_df['CREDITS_USED_PRIOR_PERIOD'].iloc[0],
                 'relative': True,
                 'valueformat': '.1%'},
        title = {'text': "Cloud Services Credits Usage Comparison"},
        domain = {'row': 0, 'column': 0}
    ))
    
    # Update layout
    cs_1d_fig.update_layout(
        height=300,
        title_text="Cloud Services Credits Usage Yesterday vs Day Before",
        title_x=0.5,
        title_y=0.95
    )
    
    # Display the chart
    st.plotly_chart(cs_1d_fig, use_container_width=True)

    # Generated by Snowflake Copilot
    # Execute the query
    credits_by_mo_df = session.sql(wh_credits_by_mo_sql).to_pandas()

    # Create stacked bar chart
    wh_credits_by_mo_fig = go.Figure()
    
    # Add bars for compute credits
    wh_credits_by_mo_fig.add_trace(go.Bar(
        x=credits_by_mo_df['USAGE_MONTH'],
        y=credits_by_mo_df['Compute Credits'],
        name='Compute Credits',
        marker_color='rgb(55, 83, 109)'
    ))
    
    # Add bars for cloud services credits
    wh_credits_by_mo_fig.add_trace(go.Bar(
        x=credits_by_mo_df['USAGE_MONTH'],
        y=credits_by_mo_df['Credits Used Cloud Svcs'],
        name='Cloud Services Credits',
        marker_color='rgb(26, 118, 255)'
    ))
    
    # Update layout
    wh_credits_by_mo_fig.update_layout(
        title='Monthly Credit Usage Breakdown',
        xaxis_title='Usage Month',
        yaxis_title='Credits Used',
        barmode='stack',
        height=400
    )
    
    # Display the chart
    st.plotly_chart(wh_credits_by_mo_fig, use_container_width=True)

    # Generated by Snowflake Copilot
    # Execute the query
    credits_by_wk_df = session.sql(wh_credits_by_wk_sql).to_pandas()
    
    # Create stacked bar chart
    wh_credits_by_wk_fig = go.Figure()
    
    # Add bars for compute credits
    wh_credits_by_wk_fig.add_trace(go.Bar(
        x=credits_by_wk_df['USAGE_WEEK'],
        y=credits_by_wk_df['Compute Credits'],
        name='Compute Credits',
        marker_color='rgb(55, 83, 109)'
    ))
    
    # Add bars for cloud services credits 
    wh_credits_by_wk_fig.add_trace(go.Bar(
        x=credits_by_wk_df['USAGE_WEEK'],
        y=credits_by_wk_df['Credits Used Cloud Svcs'],
        name='Cloud Services Credits',
        marker_color='rgb(26, 118, 255)'
    ))
    
    # Update layout
    wh_credits_by_wk_fig.update_layout(
        title='Weekly Credit Usage Breakdown',
        xaxis_title='Usage Week',
        yaxis_title='Credits Used',
        barmode='stack',
        height=400
    )
    
    # Display the chart
    st.plotly_chart(wh_credits_by_wk_fig, use_container_width=True)

    # Generated by Snowflake Copilot
    # Execute the query
    credits_by_dy_df = session.sql(wh_credits_by_dy_sql).to_pandas()
    
    # Create stacked bar chart
    wh_credits_by_dy_fig = go.Figure()
    
    # Add bars for compute credits
    wh_credits_by_dy_fig.add_trace(go.Bar(
        x=credits_by_dy_df['USAGE_DAY'],
        y=credits_by_dy_df['Compute Credits'],
        name='Compute Credits',
        marker_color='rgb(55, 83, 109)'
    ))
    
    # Add bars for cloud services credits
    wh_credits_by_dy_fig.add_trace(go.Bar(
        x=credits_by_dy_df['USAGE_DAY'], 
        y=credits_by_dy_df['Credits Used Cloud Svcs'],
        name='Cloud Services Credits',
        marker_color='rgb(26, 118, 255)'
    ))
    
    # Update layout
    wh_credits_by_dy_fig.update_layout(
        title='Daily Credit Usage Breakdown',
        xaxis_title='Usage Day',
        yaxis_title='Credits Used',
        barmode='stack',
        height=400
    )
    
    # Display the chart
    st.plotly_chart(wh_credits_by_dy_fig, use_container_width=True)

    # Generated by Snowflake Copilot
    # Execute the query
    t10_wh_df = session.sql(t10_wh_credit_by_mo_sql).to_pandas()
    
    # Create bar chart
    t10_wh_fig = go.Figure()
    
    # Add bars for each warehouse
    for warehouse in t10_wh_df['WAREHOUSE_NAME'].unique():
        warehouse_data = t10_wh_df[t10_wh_df['WAREHOUSE_NAME'] == warehouse]
        t10_wh_fig.add_trace(go.Bar(
            x=warehouse_data['USAGE_MONTH'],
            y=warehouse_data['WH Credits'],
            name=warehouse
        ))
    
    # Update layout
    t10_wh_fig.update_layout(
        title='Monthly Warehouse Credit Usage by Warehouse',
        xaxis_title='Usage Month',
        yaxis_title='Warehouse Credits',
        barmode='group',
        height=500,
        showlegend=True
    )
    
    # Display the chart
    st.plotly_chart(t10_wh_fig, use_container_width=True)












                        